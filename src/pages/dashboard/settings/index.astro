---
export const prerender = false;
import DashboardLayout from '../../../layouts/DashboardLayout.astro';
import { requireAuth } from '../../../lib/authMiddleware';
import { getUserProfile } from '../../../lib/userProfile';

// Check authentication first
const authResult = await requireAuth(Astro);

if (authResult instanceof Response) {
  return authResult; // This is a redirect
}

// Now we can be certain we have an authenticated user
const { user } = authResult; // session is not used

// Get structured user profile
const userProfile = getUserProfile(user);
const displayName = userProfile?.displayName || '';
const avatarUrl = userProfile?.avatarUrl;
---

<DashboardLayout title="Settings - notshort">
  <div class="py-6">
    <h2 class="text-2xl font-bold leading-7 text-gray-900 dark:text-white sm:truncate sm:text-3xl sm:tracking-tight">
      Account Settings
    </h2>
    <p class="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">
      Manage your account preferences and settings
    </p>
  </div>

  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg mt-6">
    <div class="px-4 py-5 sm:px-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Profile Settings</h3>
      <p class="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Update your profile information.</p>
    </div>
    <div class="border-t border-gray-200 dark:border-gray-700">
      <div class="px-4 py-5 sm:p-6">
        <form id="profile-form" class="space-y-6">
          <div class="flex flex-col sm:flex-row items-start gap-6">
            <div class="flex-shrink-0">
              <!-- Current profile picture -->
              <div class="relative">
                {avatarUrl ? (
                  <img src={avatarUrl} alt="Profile picture" id="current-avatar" class="h-24 w-24 rounded-full object-cover border-2 border-gray-200 dark:border-gray-700" />
                ) : (
                  <div id="current-avatar-placeholder" class="h-24 w-24 rounded-full bg-gray-600 text-white flex items-center justify-center font-mono text-3xl">
                    {(displayName || user.email || 'User').charAt(0).toUpperCase()}
                  </div>
                )}
              </div>
              <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">
                Profile picture is currently set from your login provider.
              </p>
            </div>

            <div class="w-full">
              <div class="space-y-4">
                <div>
                  <label for="displayName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Display name</label>
                  <input type="text" name="displayName" id="displayName" value={displayName} placeholder={user.email ? user.email.split('@')[0] : 'Display Name'} class="mt-1 focus:ring-gray-500 focus:border-gray-500 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md p-2" />
                </div>
                
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email address</label>
                  <input type="email" name="email" id="email" value={user.email || ''} disabled class="mt-1 focus:ring-gray-500 focus:border-gray-500 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md p-2 bg-gray-50 dark:bg-gray-800" />
                  <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Email address cannot be changed. Contact support if needed.</p>
                </div>

                <div id="success-message" class="text-green-600 dark:text-green-400 hidden">
                  Profile updated successfully!
                </div>
                
                <div id="error-message" class="text-red-600 dark:text-red-400 hidden">
                  Error updating profile. Please try again.
                </div>

                <div class="flex justify-end">
                  <button type="submit" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-800 hover:bg-gray-700 focus:outline-none">
                    Save Changes
                  </button>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Password Settings -->
  <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg mt-8">
    <div class="px-4 py-5 sm:px-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Security Settings</h3>
      <p class="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Manage your account password and security.</p>
    </div>
    <div class="border-t border-gray-200 dark:border-gray-700">
      <div class="px-4 py-5 sm:p-6">
        <form id="password-form" class="space-y-6">
          <div>
            <label for="current-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Current password</label>
            <input type="password" name="current-password" id="current-password" class="mt-1 focus:ring-gray-500 focus:border-gray-500 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md p-2" />
          </div>

          <div>
            <label for="new-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">New password</label>
            <input type="password" name="new-password" id="new-password" class="mt-1 focus:ring-gray-500 focus:border-gray-500 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md p-2" />
          </div>

          <div>
            <label for="confirm-password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Confirm password</label>
            <input type="password" name="confirm-password" id="confirm-password" class="mt-1 focus:ring-gray-500 focus:border-gray-500 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md p-2" />
          </div>

          <div id="password-success-message" class="text-green-600 dark:text-green-400 hidden">
            Password updated successfully!
          </div>
          
          <div id="password-error-message" class="text-red-600 dark:text-red-400 hidden">
            Error updating password. Please try again.
          </div>

          <div class="flex justify-end">
            <button type="submit" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-800 hover:bg-gray-700 focus:outline-none">
              Update Password
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  import { supabase } from '../../../lib/supabaseClient';
    // Profile update form
  const profileForm = document.getElementById('profile-form');
  const displayNameInput = document.getElementById('displayName') as HTMLInputElement;
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');

  profileForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide any previous messages
    successMessage?.classList.add('hidden');
    errorMessage?.classList.add('hidden');
    
    const displayName = displayNameInput?.value || '';
    
    try {
      // Update user metadata
      const { error } = await supabase.auth.updateUser({
        data: { name: displayName, full_name: displayName }
      });
      
      if (error) {
        throw error;
      }
      
      // Show success message
      successMessage?.classList.remove('hidden');
      
      // Update the avatar placeholder if needed
      const avatarPlaceholder = document.getElementById('current-avatar-placeholder');
      if (avatarPlaceholder && displayName) {
        avatarPlaceholder.textContent = displayName.charAt(0).toUpperCase();
      }
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        successMessage?.classList.add('hidden');
      }, 3000);
    } catch (error) {
      console.error('Error updating profile:', error);
      errorMessage?.classList.remove('hidden');
    }
  });
    // Password update form
  const passwordForm = document.getElementById('password-form') as HTMLFormElement;
  const currentPasswordInput = document.getElementById('current-password') as HTMLInputElement;
  const newPasswordInput = document.getElementById('new-password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm-password') as HTMLInputElement;
  const passwordSuccessMessage = document.getElementById('password-success-message');
  const passwordErrorMessage = document.getElementById('password-error-message') as HTMLElement;
  
  passwordForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide any previous messages
    passwordSuccessMessage?.classList.add('hidden');
    passwordErrorMessage?.classList.add('hidden');
    
    const currentPassword = currentPasswordInput?.value;
    const newPassword = newPasswordInput?.value;
    const confirmPassword = confirmPasswordInput?.value;
      // Validate passwords
    if (!currentPassword || !newPassword || !confirmPassword) {
      if (passwordErrorMessage) {
        passwordErrorMessage.textContent = 'Please fill in all password fields.';
        passwordErrorMessage.classList.remove('hidden');
      }
      return;
    }
    
    if (newPassword !== confirmPassword) {
      if (passwordErrorMessage) {
        passwordErrorMessage.textContent = 'New passwords do not match.';
        passwordErrorMessage.classList.remove('hidden');
      }
      return;
    }
    
    if (newPassword.length < 6) {
      if (passwordErrorMessage) {
        passwordErrorMessage.textContent = 'Password must be at least 6 characters.';
        passwordErrorMessage.classList.remove('hidden');
      }
      return;
    }
    
    try {
      // Update password
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });
      
      if (error) {
        throw error;
      }
      
      // Clear form
      passwordForm.reset();
      
      // Show success message
      passwordSuccessMessage?.classList.remove('hidden');
      
      // Hide success message after 3 seconds
      setTimeout(() => {
        passwordSuccessMessage?.classList.add('hidden');
      }, 3000);    } catch (error: any) {
      console.error('Error updating password:', error);
      if (passwordErrorMessage) {
        passwordErrorMessage.textContent = error.message || 'Error updating password. Please try again.';
        passwordErrorMessage.classList.remove('hidden');
      }
    }
  });
</script>
