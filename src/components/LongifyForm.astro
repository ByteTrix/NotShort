---
// LongifyForm.astro - Form component for "longifying" URLs
---

<div class="longify-form w-full max-w-3xl mx-auto">
  <form id="url-form" class="flex flex-col md:flex-row gap-4 w-full">
    <div class="flex-grow">
      <input 
        type="url" 
        id="original-url" 
        name="url" 
        placeholder="Enter a URL to make it unnecessarily long..." 
        required
        class="w-full px-4 py-3 border-1 border-gray-300 dark:border-gray-700 font-mono focus:ring-2 focus:ring-gray-400 focus:outline-none transition-colors"
      />
    </div>
    <button
      type="submit"
      class="longify-submit-btn"
    >
      <span class="button-text">Make It Long!</span> {/* Wrap text */}
    </button>
  </form>
  
  <div id="result-container" class="mt-6 hidden">
    <div class="bg-gray-100 dark:bg-gray-800 border-1 border-gray-200 dark:border-gray-700 p-6 rounded-sm">
      <h3 class="font-mono text-lg mb-3">Your Unnecessarily Long URL:</h3>
      <div class="flex flex-col sm:flex-row gap-2 items-start sm:items-center">
        <div class="url-display max-w-full overflow-hidden font-mono text-sm bg-white dark:bg-gray-900 p-3 border-1 border-gray-200 dark:border-gray-700 flex-grow break-all">
          <span id="long-url">https://kavinthangavel.com/very-long-ridiculous-url-example</span>
        </div>
        <button 
          id="copy-btn" 
          class="py-2 px-4 bg-gray-800 hover:bg-gray-700 text-white font-mono text-sm transition-colors whitespace-nowrap"
        >
          Copy URL
        </button>
      </div>
      <p id="copy-confirmation" class="text-green-600 mt-2 text-sm hidden">
        Copied to clipboard!
      </p>
      <p class="text-xs text-gray-500 dark:text-gray-400 mt-4">
        We've added ~500% more characters to your URL. You're welcome!
      </p>
    </div>
  </div>
</div>

<script>
  import { showToast } from '../lib/toastService'; // Corrected import path

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('url-form');
    const resultContainer = document.getElementById('result-container');
    const longUrlElement = document.getElementById('long-url');
    const copyBtn = document.getElementById('copy-btn');
    const copyConfirmation = document.getElementById('copy-confirmation');
    
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Get the URL from the form
      const urlInput = document.getElementById('original-url') as HTMLInputElement;
      const url = urlInput.value.trim();
      
      if (!url) return;      
      try {
        // Call the longify API endpoint
        const response = await fetch('/api/longify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ url }),
        });
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: 'Failed to parse error response' })); // Gracefully handle non-JSON error responses
          // If user is not authenticated, redirect to login page
          if (response.status === 500) {
            showToast({ message: 'Hey You..Yes You, Redirecting to login...', type: 'warning' });
            setTimeout(() => {
              const loginUrl = `/login?redirect=${encodeURIComponent(window.location.pathname + window.location.search)}`;
              window.location.href = loginUrl;
            }, 1500); // Delay redirect slightly to allow toast to be seen
            return;
          }
          // Throw an object with status and message for other errors
          throw { status: response.status, message: errorData.error || `HTTP error! status: ${response.status}` };
        }
        
        const data = await response.json();
        
        // Display the result
        if (longUrlElement && resultContainer) {
          // Update UI with the result
          longUrlElement.textContent = data.long;
          longUrlElement.setAttribute('data-url', data.long);
          resultContainer.classList.remove('hidden');
          
          // If this is a duplicate link, show a notification
          const infoElement = document.getElementById('link-info') || document.createElement('p');
          if (data.isDuplicate) {
            infoElement.id = 'link-info';
            infoElement.className = 'text-sm text-amber-600 dark:text-amber-400 mt-2';
            infoElement.innerHTML = `${data.message} <a href="/about#link-policy" class="underline">Learn more</a>`;
            
            // Add to the result container if not already there
            if (!document.getElementById('link-info')) {
              const urlDisplay = document.querySelector('.url-display')?.parentNode;
              urlDisplay?.parentNode?.insertBefore(infoElement, urlDisplay.nextSibling);
            }
          } else if (document.getElementById('link-info')) {
            // Remove the info element if it exists but this is not a duplicate
            document.getElementById('link-info')?.remove();
          }
          
          // Scroll to the result container
          resultContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      } catch (error: any) {
        console.error('Error longifying URL:', error);
        const isAuthError = error &&
                            (error.status === 401 ||
                             (error.status === 500 && error.message && error.message.toLowerCase().includes('authentication error')));

        if (isAuthError) {
          showToast({ message: error.message || 'Authentication required. Redirecting to login...', type: 'error' });
          setTimeout(() => {
            const loginUrl = `/login?redirect=${encodeURIComponent(window.location.pathname + window.location.search)}`;
            window.location.href = loginUrl;
          }, 2000);
        } else if (error && error.status === 501) {
          showToast({ message: "Our hamsters are on a coffee break! (Error 500). Please try again shortly.", type: 'warning' });
        } else {
          showToast({ message: error.message || 'Failed to create long URL. Please try again.', type: 'error' });
        }
      }
    });
    
    // Copy to clipboard functionality
    copyBtn?.addEventListener('click', async () => {
      const urlToCopy = longUrlElement?.getAttribute('data-url') || longUrlElement?.textContent;
      
      if (urlToCopy) {
        try {
          await navigator.clipboard.writeText(urlToCopy);
          
          // Show copy confirmation
          if (copyConfirmation) {
            copyConfirmation.classList.remove('hidden');
            setTimeout(() => {
              copyConfirmation.classList.add('hidden');
            }, 3000);
          }
        } catch (err) {
          console.error('Failed to copy URL:', err);
        }
      }
    });
  });
</script>

<style>  .longify-submit-btn {
    /* Base styles */
    display: inline-block;
    position: relative;
    padding: 0.8rem 1.75rem;
    font-family: var(--font-mono);
    font-size: 1rem;
    font-weight: 600;
    color: #ffffff;
    background-color: #111827;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    overflow: hidden;
    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    z-index: 1;
    text-align: center;
    min-width: 150px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .longify-submit-btn .button-text {
    position: relative;
    z-index: 3;
  }
  
  .longify-submit-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: #2563eb; /* Blue background for hover effect */
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
    z-index: 1;
  }

  .longify-submit-btn::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      rgba(255, 255, 255, 0) 0%, 
      rgba(255, 255, 255, 0.2) 50%, 
      rgba(255, 255, 255, 0) 100%
    );
    z-index: 2;
    transform: translateX(-100%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .longify-submit-btn:hover {
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
  }

  .longify-submit-btn:hover::before {
    transform: scaleX(1);
    transform-origin: left;
  }

  .longify-submit-btn:hover::after {
    animation: shimmer 1.5s infinite;
    opacity: 1;
  }
    @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
  .longify-submit-btn:active {
    transform: translateY(1px) scale(0.99);
    box-shadow: 0 2px 8px rgba(37, 99, 235, 0.2);
  }

  /* Remove old styles if they exist */
  /* .btn-bg { display: none; } */
  /* .longify-btn { potentially override if needed  } */

</style>
