---
import { supabase } from '../lib/supabaseClient';
import Section from './Section.astro';
import FormattedDate from './FormattedDate.astro';

interface RecentLink {
  slug: string;
  original: string;
  created_at: string;
}

// Fetch recent links from Supabase
// Limit to 5 recent links
const { data: links, error } = await supabase
  .from('links')
  .select('slug, original, created_at')
  .order('created_at', { ascending: false })
  .limit(5);

const siteUrl = import.meta.env.SITE ;
---

<Section variant="light">
  <div class="mb-8">
    <h2 class="title">Recently Longified Links</h2>
    <p class="subtitle-small">Witness the magnificent URLs we've made worse.</p>
  </div>
  
  {links && links.length > 0 ? (
    <div class="overflow-x-auto w-full">
      <table class="w-full border-collapse font-mono text-sm"> {/* Base font size */}
        <thead class="bg-gray-100 dark:bg-gray-800"> {/* Header background */}
          <tr> {/* Removed border from tr, will apply to th */}
            <th class="py-3 px-6 text-left font-semibold text-gray-700 dark:text-gray-200 border-b-2 border-gray-200 dark:border-gray-700">Original URL</th> {/* Increased padding, bolder, border */}
            <th class="py-3 px-6 text-left font-semibold text-gray-700 dark:text-gray-200 border-b-2 border-gray-200 dark:border-gray-700">Long URL</th>
            <th class="py-3 px-6 text-left font-semibold text-gray-700 dark:text-gray-200 border-b-2 border-gray-200 dark:border-gray-700">Created</th>
          </tr>
        </thead>
        <tbody>
          {(links as RecentLink[]).map((link: RecentLink) => (
            <tr class="border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors"> {/* Adjusted hover */}
              <td class="py-4 px-6 align-middle"> {/* Increased padding, vertical align */}
                <div class="truncate max-w-[250px]"> {/* No hover group, just masking */}
                  <span tabindex="-1" class="pointer-events-none cursor-not-allowed text-blue-400 dark:text-blue-600 opacity-60 truncate" title="Masked for privacy">
                    {(() => {
                      let url = link.original;
                      // Remove protocol (http:// or https://)
                      url = url.replace(/^https?:\/\//, '');
                      // Regex to find the last dot and extension (e.g., .com, .in, .org)
                      const urlMatch = url.match(/(.*)(\.[a-zA-Z]{2,})(\/?[^\/]*)?$/);
                      if (!urlMatch || url.length <= 16) return '###***@!$' + url.slice(-8); // Always mask short URLs too
                      const prefix = urlMatch[1];
                      const ext = urlMatch[2] + (urlMatch[3] || '');
                      // Mask first, middle, and last letter of the domain part with more chars/symbols
                      if (prefix.length < 3) return '@!$%&*' + ext;
                      let chars = prefix.split('');
                      const mid = Math.floor((chars.length - 1) / 2);
                      chars[0] = '@';
                      chars[mid] = '!';
                      chars[chars.length - 1] = '$';
                      for (let i = 1; i < chars.length - 1; i++) {
                        chars[i] = (i !== mid) ? '*' : chars[i]
                      }
                      return chars.join('') + ext;
                    })()}
                  </span>
                </div>
              </td>
              <td class="py-4 px-6 align-middle">
                 <div class="truncate max-w-[350px]"> {/* Slightly increased max-width */}
                  <span class="text-black-400 dark:text-blue-500 select-none" title="Copy/redirect disabled">
                    {(() => {
                      let fullLong = `${siteUrl}/${link.slug}`;
                      // Remove protocol (http:// or https://)
                      fullLong = fullLong.replace(/^https?:\/\//, '');
                      return fullLong.length > 35 ? fullLong.substring(0, 32) + '...' : fullLong;
                    })()}
                  </span>
                </div>
              </td>
              <td class="py-4 px-6 text-gray-600 dark:text-gray-400 whitespace-nowrap align-middle">
                <FormattedDate date={new Date(link.created_at)} />
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  ) : error ? (
    <div class="text-center py-10">
      <p class="text-red-500">Error loading recent links. Please try again later.</p>
    </div>
  ) : (
    <div class="text-center py-10">
      <p class="text-gray-500 dark:text-gray-400">No links have been longified yet. Be the first!</p>
    </div>
  )}
</Section>