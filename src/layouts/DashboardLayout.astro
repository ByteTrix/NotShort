---
import Layout from './Layout.astro';
import { supabase } from '../lib/supabaseClient';
import { getUserProfile } from '../lib/userProfile';
import type { User } from '@supabase/supabase-js'; // For type safety with Astro.locals.user

// User data is expected to be populated in Astro.locals.user by the authMiddleware
// for pages using this layout.
const userFromLocals = Astro.locals.user as User | undefined; // Cast to User or undefined

// If Astro.locals.user is not available, user will be null.
// The UI (avatar, display name) should gracefully handle a null user/userProfile.
const user = userFromLocals || null;

// Use our utility to get structured user profile information
const userProfile = getUserProfile(user);
const avatarUrl = userProfile?.avatarUrl;
const userDisplayName = userProfile?.displayName || 'User'; // getUserProfile handles good defaults

// Get page title from props or default
const { title = 'Dashboard - notshort' } = Astro.props;
---

<Layout title={title}>  <div class="bg-gray-50 dark:bg-gray-900 min-h-screen">    <!-- Dashboard Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-10 backdrop-blur-sm">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex h-16 justify-between items-center">
          <!-- Navigation links -->
          <nav class="flex items-center space-x-2 sm:space-x-5 lg:space-x-8 overflow-x-auto scrollbar-hide">
            <a href="/" class="font-mono text-sm px-2 py-2 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 whitespace-nowrap border-r pr-3 mr-1">
              Home
            </a>
            <a href="/dashboard" class="font-mono px-2 sm:px-3 py-2 text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white whitespace-nowrap text-sm">
              Dashboard
            </a>
            <a href="/dashboard/links" class="font-mono px-2 sm:px-3 py-2 text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white whitespace-nowrap text-sm">
              My Links
            </a>
            <a href="/dashboard/analytics" class="font-mono px-2 sm:px-3 py-2 text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white whitespace-nowrap text-sm">
              Analytics
            </a>
          </nav>
          
          <!-- User profile & dropdown -->
          <div class="flex items-center">
            <div class="relative ml-3">
              <div class="flex items-center">
                <div class="hidden md:block">
                  <span class="font-mono text-sm text-gray-600 dark:text-gray-300 mr-3">{userDisplayName}</span>
                </div>
                <button id="user-menu-button" type="button" class="bg-gray-800 flex text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-gray-500" aria-expanded="false" aria-haspopup="true">
                  <span class="sr-only">Open user menu</span>                  {avatarUrl ? (
                    <img 
                      src={avatarUrl} 
                      alt={userDisplayName}
                      class="h-8 w-8 rounded-full object-cover" 
                      crossorigin="anonymous"
                    />
                  ) : (
                    <div class="h-8 w-8 rounded-full bg-gray-600 text-white flex items-center justify-center font-mono">
                      {userDisplayName.charAt(0).toUpperCase()}
                    </div>
                  )}
                </button>
              </div>                <!-- Simplified dropdown menu - only profile settings and logout -->
              <div id="user-dropdown" class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white dark:bg-gray-800 py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
                <a href="/dashboard/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700" role="menuitem">Profile Settings</a>
                <div class="border-t border-gray-100 dark:border-gray-700"></div>
                <button id="logout-button" class="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700" role="menuitem">Logout</button>
              </div>
            </div>
          </div>
        </div>      </div>
    </header>    <!-- Dashboard Content -->
    <div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
      <slot />
    </div>
  </div>
</Layout>

<style>
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;  /* Chrome, Safari and Opera */
  }
</style>

<script>
  import { supabase } from '../lib/supabaseClient';
  
  // Handle logout
  const logoutButton = document.getElementById('logout-button');
  logoutButton?.addEventListener('click', async () => {
    await supabase.auth.signOut();
    window.location.href = '/';
  });
  
  // User dropdown toggle
  const userMenuButton = document.getElementById('user-menu-button');
  const userDropdown = document.getElementById('user-dropdown');
  
  userMenuButton?.addEventListener('click', () => {
    userDropdown?.classList.toggle('hidden');
  });
  
  // Close dropdown when clicking outside
  document.addEventListener('click', (event) => {
    if (!userMenuButton?.contains(event.target as Node) && !userDropdown?.contains(event.target as Node)) {
      userDropdown?.classList.add('hidden');
    }
  });  // Enhanced fix for profile image loading issues
  const handleProfileImageError = (event: Event) => {
    const imgElement = event.target as HTMLImageElement;
    const parent = imgElement.parentElement;
    
    if (parent) {
      // Get the user's display name initial
      const displayName = imgElement.getAttribute('alt') || 'User';
      const initial = displayName.charAt(0).toUpperCase();
      
      // Create fallback avatar with initial
      const fallbackAvatar = document.createElement('div');
      fallbackAvatar.className = 'h-8 w-8 rounded-full bg-gray-600 text-white flex items-center justify-center font-mono';
      fallbackAvatar.textContent = initial;
      
      // Replace the image with the fallback
      parent.replaceChild(fallbackAvatar, imgElement);
    }
  };

  // Add handler immediately for existing profile images
  document.querySelectorAll('img[crossorigin="anonymous"]').forEach(img => {
    img.addEventListener('error', handleProfileImageError);
  });
  
  // Also add handler after DOM is fully loaded to catch any dynamically added images
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('img[crossorigin="anonymous"]').forEach(img => {
      img.addEventListener('error', handleProfileImageError);
    });
  });
</script>