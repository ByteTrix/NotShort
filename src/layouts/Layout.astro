---
import Footer from '../components/Footer.astro';
import { SITE_NAME } from '../consts';
import Analytics from '@vercel/analytics/astro';
interface Props {
	title: string;
}

const { title } = Astro.props;
// Define main navigation links - conditional links like Dashboard and Logout will be handled with JavaScript
const navLinks = { 
	// "/":"Home",
	"/blog":"Blog",
	"/about":"About"
}

// Auth links will be conditionally shown/hidden via JavaScript
const authLinks = {
	login: { href: "/login", text: "Sign in" },
	signup: { href: "/signup", text: "Sign up" },
	dashboard: { href: "/dashboard", text: "Dashboard" },
	logout: { text: "Logout" }
}
const gaMeasurementIdExists = !!import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href='data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" height="100px" width="100px"><text y=".9em" font-size="90">0️⃣</text></svg>' />
		<meta name="generator" content={Astro.generator} />
		<title>{title || SITE_NAME}</title>
		{/* Google Analytics 4 (GA4) */}
		{gaMeasurementIdExists && (
			<>
				<script is:inline async src={`https://www.googletagmanager.com/gtag/js?id=${import.meta.env.GA_MEASUREMENT_ID}`}></script>
				<script is:inline>
				  window.dataLayer = window.dataLayer || [];
				  function gtag(){dataLayer.push(arguments);}
				  gtag('js', new Date());
				  gtag('config', '${import.meta.env.PUBLIC_GA_MEASUREMENT_ID}');
				</script>
			</>
		)}
		{/* End Google Analytics 4 */}
	</head>
	<body>
		<nav class="border-b-1 border-b-gray-200">
			<div class="flex items-center justify-between border-x-1 border-gray-200 pl-5 wrapper mx-auto">
				<a href="/" class="flex items-center py-2">
					<h1 class="font-mono text-lg sm:text-xl text-gray-900 dark:text-gray-100">NOTSHORT</h1>
				</a>
				<div class="flex items-center">					<ul class="flex space-x-4">
						{Object.entries(navLinks).map(([href, title]) => {
							return <li>
								<a href={href} class="text-sm px-3 py-5 tracking-0.1 block">{title}</a>
							</li>
						})}
						<li id="dashboard-nav-item" class="hidden">
							<a href="/dashboard" class="text-sm px-3 py-5 tracking-0.1 block">Dashboard</a>
						</li>
					</ul>
					
					<!-- Authentication links -->
					<div id="auth-links" class="ml-4 flex items-center border-l border-gray-200 dark:border-gray-700 pl-4">
						<a href="/login" id="login-link" class="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hidden px-3 py-5">Sign in</a>
						<a href="/signup" id="signup-link" class="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hidden px-3 py-5">Sign up</a>
						<button id="logout-btn" class="text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 text-left hidden px-3 py-5">Logout</button>
					</div>
				</div>
			</div>
					<!-- Mobile menu, hidden by default -->
			<div id="mobile-menu" class="md:hidden hidden border-t border-gray-200 dark:border-gray-700">
				<div class="px-2 pt-2 pb-3 space-y-1">
					{Object.entries(navLinks).map(([href, title]) => (
						<a href={href} class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white">
							{title}
						</a>
					))}
					<div id="mobile-dashboard-nav-item" class="hidden">
						<a href="/dashboard" class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">Dashboard</a>
					</div>
					<div class="border-t border-gray-200 dark:border-gray-700 mt-2 pt-2">
						<a href="/login" id="mobile-login-link" class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 hidden">Sign in</a>
						<a href="/signup" id="mobile-signup-link" class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 hidden">Sign up</a>
						<button id="mobile-logout-btn" class="block w-full text-left px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 hidden">Logout</button>
					</div>
				</div>
			</div>
		</nav>
		<main>
		<slot />
		</main>
		{/* Container for toast notifications, managed by toastService.ts */}
		<div id="toast-notifications-container" class="fixed top-0 right-0 z-50 p-4 space-y-2"></div>
		<Footer />
		<script>
			import { supabase } from '../lib/supabaseClient';
					// Desktop elements
			const loginLink = document.getElementById('login-link');
			const signupLink = document.getElementById('signup-link');
			const logoutBtn = document.getElementById('logout-btn');
			
			// Mobile elements
			const mobileLoginLink = document.getElementById('mobile-login-link');
			const mobileSignupLink = document.getElementById('mobile-signup-link');
			const mobileLogoutBtn = document.getElementById('mobile-logout-btn');
			
			// Mobile menu elements
			const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
			const mobileMenu = document.getElementById('mobile-menu');
			const navbarContent = document.getElementById('navbar-content');
			
			// Mobile menu toggle
			mobileMenuToggle?.addEventListener('click', () => {
				navbarContent?.classList.toggle('hidden');
				mobileMenu?.classList.toggle('hidden');
			});
			
			// Close mobile menu when clicking outside
			document.addEventListener('click', (event) => {
				const target = event.target as HTMLElement;
				if (mobileMenu && 
					!mobileMenu.classList.contains('hidden') && 
					!mobileMenu.contains(target) && 
					!mobileMenuToggle?.contains(target)) {
					mobileMenu.classList.add('hidden');
				}
			});
					// Check auth status and update UI
			async function updateAuthUI() {
				// First authenticate user securely through the Supabase Auth server
				const { data: userData } = await supabase.auth.getUser();
				// Then get the session if needed
				await supabase.auth.getSession(); // We don't need the session data, just the user data
				// Use authenticated user status as the source of truth
				const isLoggedIn = !!userData.user;
				
				// Get dashboard nav items
				const dashboardNavItem = document.getElementById('dashboard-nav-item');
				const mobileDashboardNavItem = document.getElementById('mobile-dashboard-nav-item');
				
				if (isLoggedIn) {
					// User is logged in - Desktop
					loginLink?.classList.add('hidden');
					signupLink?.classList.add('hidden');
					logoutBtn?.classList.remove('hidden');
					dashboardNavItem?.classList.remove('hidden');
					
					// User is logged in - Mobile
					mobileLoginLink?.classList.add('hidden');
					mobileSignupLink?.classList.add('hidden');
					mobileLogoutBtn?.classList.remove('hidden');
					mobileDashboardNavItem?.classList.remove('hidden');
				} else {
					// User is not logged in - Desktop
					loginLink?.classList.remove('hidden');
					signupLink?.classList.remove('hidden');
					logoutBtn?.classList.add('hidden');
					dashboardNavItem?.classList.add('hidden');
					
					// User is not logged in - Mobile
					mobileLoginLink?.classList.remove('hidden');
					mobileSignupLink?.classList.remove('hidden');
					mobileLogoutBtn?.classList.add('hidden');
					mobileDashboardNavItem?.classList.add('hidden');
				}
			}
			
			// Handle logout - Desktop
			logoutBtn?.addEventListener('click', async () => {
				await supabase.auth.signOut();
				window.location.href = '/';
			});
			
			// Handle logout - Mobile
			mobileLogoutBtn?.addEventListener('click', async () => {
				await supabase.auth.signOut();
				window.location.href = '/';
			});
			
			// Initial auth UI update
			updateAuthUI();
		</script>
		<Analytics />
	</body>
</html>
<style is:global>
	html,
	body {
		height: 100%;
		min-height: 100vh;
	}
	body {
		display: flex;
		flex-flow: column;
	}	body > main {
		flex: 1;
	}
	
	/* Hide scrollbar but keep functionality */
	.scrollbar-hide {
		-ms-overflow-style: none;  /* IE and Edge */
		scrollbar-width: none;  /* Firefox */
	}
	.scrollbar-hide::-webkit-scrollbar {
		display: none;  /* Chrome, Safari and Opera */
	}
	.content-wrapper {
        :is(h2,h3,h4,h5,h6) {
            font-weight: 600;
            margin-top: 1ex;
        }
        p {
            margin-top: 1ex;
        }
        h2 {
            font-size: 1.875rem;
        }
        h3 {
            font-size: 1.5rem;
        }
        h4 {
            font-size: 1.35rem;
        }
        h5, h6 {
            font-weight: 500;
            font-size: 1.1rem;
        }
		ul {
			list-style-type:square;
			list-style-position: inside;
			margin-top: 1ex;
		}
		pre {
			margin-top: 1ex;
			padding-block: 1.5rem;
		}
    }
</style>